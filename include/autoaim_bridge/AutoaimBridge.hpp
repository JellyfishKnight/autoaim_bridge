// created by liuhan on 2023/11/18
// Submodule of HeliosCV
/*
 * ██   ██ ███████ ██      ██  ██████  ███████
 * ██   ██ ██      ██      ██ ██    ██ ██
 * ███████ █████   ██      ██ ██    ██ ███████
 * ██   ██ ██      ██      ██ ██    ██      ██
 * ██   ██ ███████ ███████ ██  ██████  ███████
 *
 */

#include "rclcpp/rclcpp.hpp"
#include "serial/serial.h"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_box.h"
#include "realtime_tools/realtime_publisher.h"

#include "tf2/convert.h"
#include "tf2_ros/buffer.h"
#include "tf2_ros/transform_broadcaster.h"
#include "tf2_ros/static_transform_broadcaster.h"
#include "geometry_msgs/msg/transform_stamped.hpp"
#include <cstdint>
#include <rclcpp/parameter.hpp>
#include <rclcpp/parameter_client.hpp>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>

#include "autoaim_interfaces/msg/target.hpp"
#include "autoaim_interfaces/msg/receive_data.hpp"

#include "Packets.hpp"

// auto generated by ros2 generate_parameter_library
// https://github.com/PickNikRobotics/generate_parameter_library
#include "autoaim_bridge_parameters.hpp"


namespace helios_cv {

using Params = autoaim_bridge::Params;
using ParamsListener = autoaim_bridge::ParamListener;

class AutoaimBridge : public rclcpp::Node {
public:
    explicit AutoaimBridge(const rclcpp::NodeOptions &options);

    ~AutoaimBridge();

private:

    void receive_loop();

    void send_callback(autoaim_interfaces::msg::Target::SharedPtr msg);

    std::shared_ptr<serial::Serial> serial_port_;

    // Parameters from ROS for IMU
    std::shared_ptr<ParamsListener> param_listener_;
    Params params_;

    // realtime publisher
    std::shared_ptr<realtime_tools::RealtimePublisher<autoaim_interfaces::msg::ReceiveData>> realtime_recv_pub_;
    rclcpp::Publisher<autoaim_interfaces::msg::ReceiveData>::SharedPtr recv_pub_;

    // tf2 utitlities
    geometry_msgs::msg::TransformStamped transform_;
    std::shared_ptr<tf2_ros::StaticTransformBroadcaster> static_pub_;
    std::shared_ptr<tf2_ros::TransformBroadcaster> dynamic_pub_;

    // subcriber
    rclcpp::Subscription<autoaim_interfaces::msg::Target>::SharedPtr target_sub_;

    // async parameter client
    // Param client to set detect_color and mode
    using ResultFuturePtr = std::shared_future<std::vector<rcl_interfaces::msg::SetParametersResult>>;
    bool mode_change_flag_ = false;
    bool color_change_flag_ = false;
    uint8_t previous_receive_color_ = 0;
    uint8_t last_autoaim_state_ = 0;
    rclcpp::AsyncParametersClient::SharedPtr detector_param_client_;
    rclcpp::AsyncParametersClient::SharedPtr predictor_param_client_;
    ResultFuturePtr set_param_future_;
    void check_and_set_param();

    SendPacket send_packet_;
    ReceivePacket recv_packet_;

    uint8_t read_buffer_[256];
    uint8_t write_buffer_[256];

    rclcpp::Logger logger_ = rclcpp::get_logger("autoaim_bridge");
};


}